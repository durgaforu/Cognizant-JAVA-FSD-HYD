Hibernate-Mappings
-------------------------
    1. one to one 
    2. one to many (collections)
    3. many to one 
    4. many to many (collections)

------------------------------------------

1. one to one Mapping
-------------------------
    -> Mapping one entity class with one relational table in data base
    Ex: if an employee is mapped for a single department id, then same 
        employee cannnot be mapped to anotther department id
    -> we use @One-To-One annotation to denote it.
    -> Ths always maintains primary key and foreign key relationships


2. one to many (collections)
-------------------------------
    -> Mapping one entity class with many entity classes.
    -> Join table
    -> Join columns

3. Many to One
-------------------
    -> mapping many entity class with a single entity class
    Ex: many employees can be mapped to a single department
    -> by default this relationship in hibernate will not create any third table.
    -> if you are mapping many employees to a single department, then
    -> employee table creates a foreign key of department.


4. Many to Many
-------------------
    -> Onece one entity is mapped with any other entity, then same entity can be mapped to more 
       than other entities and vice versa.

       Ex: If student is mapped to a course, then same student can be mapped to some other
           couse also. and same couse also can be mapped by other students.


 -> Student and course
 -> Doctor and patient
 -> Patient and Test
 -> Deligate and Meeting
    
        -> Uni-directional
        -> bio-directional

--------------------------------    




Multi Row Operations
-------------------------
    -> working on data base table records with out depending on primary keys
    -> used to deal with bulk Operations
        Three techniques
        -----------------
            1. HQL (Hibernate query language)
            2.Criteria API
            3. Native SQL

1. HQL
------------
    -> hql queries  in hibernate are database indent queries
    -> onnce you know syntax of hql, then you can work  with all types of data bases
    -> one hql can work with multi databases with same queries. so no need of learning 
       many database queries'

Note: HQL syntax is very similar to SQL syntax

EX: Select all records from a database table
SQL: select * from empployee (here employee is a database table )
HQL: from Employee (here Employee is a entitity class)
     from Employee eb
     from Employee as  eb (here eb holding properies of a EMployee class)


Note: HQL uses you entity classes. All queries in hql is based on your POJO/Entity classes only
SO, Entity class means your database table,
    Entity class properties means you database table column names.
























